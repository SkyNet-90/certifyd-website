version: "3.8"

services:
  # Nginx Web Server
  certifyd-web:
    image: nginx:alpine
    container_name: certifyd-web
    restart: unless-stopped
    ports:
      - "9001:80"
    volumes:
      - web-data:/usr/share/nginx/html
    depends_on:
      - certifyd-git-sync
    networks:
      - certifyd-network
    labels:
      - "com.docker.compose.service=web"
    command: |
      sh -c "
      cat > /etc/nginx/nginx.conf << 'EOF'
      events {
          worker_connections 1024;
      }

      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;

          # Logging
          log_format main '\$remote_addr - \$remote_user [\$time_local] \"\$request\" '
                         '\$status \$body_bytes_sent \"\$http_referer\" '
                         '\"\$http_user_agent\" \"\$http_x_forwarded_for\"';

          access_log /var/log/nginx/access.log main;
          error_log /var/log/nginx/error.log warn;

          # Basic settings
          sendfile on;
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          types_hash_max_size 2048;
          server_tokens off;

          # Gzip compression
          gzip on;
          gzip_vary on;
          gzip_min_length 1024;
          gzip_comp_level 6;
          gzip_types
              application/javascript
              application/json
              application/xml
              application/rss+xml
              application/atom+xml
              application/manifest+json
              image/svg+xml
              text/plain
              text/css
              text/xml
              text/javascript
              text/x-component;

          # Security headers
          add_header X-Frame-Options \"SAMEORIGIN\" always;
          add_header X-Content-Type-Options \"nosniff\" always;
          add_header X-XSS-Protection \"1; mode=block\" always;
          add_header Referrer-Policy \"no-referrer-when-downgrade\" always;

          server {
              listen 80;
              server_name localhost;
              root /usr/share/nginx/html;
              index index.html;

              # Enable compression for this server
              location ~* \\\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)\\\$ {
                  expires 1y;
                  add_header Cache-Control \"public, immutable\";
                  add_header Vary Accept-Encoding;
              }

              # Handle SPA routing
              location / {
                  try_files \$uri \$uri/ /index.html;
              }

              # Health check endpoint
              location /health {
                  access_log off;
                  return 200 \"healthy\\n\";
                  add_header Content-Type text/plain;
              }

              # Security.txt
              location /.well-known/security.txt {
                  return 301 /security.txt;
              }

              # Block access to sensitive files
              location ~ /\\\. {
                  deny all;
                  access_log off;
                  log_not_found off;
              }

              location ~ ~\\\$ {
                  deny all;
                  access_log off;
                  log_not_found off;
              }
          }
      }
      EOF
      nginx -g 'daemon off;'
      "

  # Git Sync & Build Container  
  certifyd-git-sync:
    image: registry.k8s.io/git-sync/git-sync:v4.2.1
    container_name: certifyd-git-sync
    restart: unless-stopped
    environment:
      - GITSYNC_REPO=${GIT_REPO:-https://github.com/SkyNet-90/Certifyd-Website.git}
      - GITSYNC_BRANCH=${GIT_BRANCH:-main}
      - GITSYNC_ROOT=/git
      - GITSYNC_DEST=source
      - GITSYNC_PERIOD=5m
      - GITSYNC_ONE_TIME=false
      - GITSYNC_MAX_FAILURES=5
      - GITSYNC_WEBHOOK_URL=http://certifyd-builder:3000/webhook
    volumes:
      - git-data:/git
    networks:
      - certifyd-network
    labels:
      - "com.docker.compose.service=git-sync"

  # Build Container
  certifyd-builder:
    image: node:18-alpine
    container_name: certifyd-builder
    restart: unless-stopped
    working_dir: /app
    environment:
      - NODE_ENV=production
    volumes:
      - git-data:/git:ro
      - web-data:/app/dist
      - builder-cache:/app/.npm
    command: |
      sh -c "
        # Install dependencies for webhook server
        npm install -g http-server express
        
        # Create webhook server
        cat > webhook-server.js << 'EOF'
        const express = require('express');
        const { execSync } = require('child_process');
        const fs = require('fs');
        const path = require('path');
        
        const app = express();
        const PORT = 3000;
        
        app.use(express.json());
        
        function buildProject() {
          console.log('üîÑ Starting build process...');
          try {
            const sourceDir = '/git/source';
            const buildDir = '/app/dist';
            
            if (!fs.existsSync(sourceDir)) {
              console.log('‚ùå Source directory not found');
              return false;
            }
            
            // Copy source to working directory
            execSync('rm -rf /app/src /app/package.json /app/vite.config.ts /app/tailwind.config.js', { stdio: 'inherit' });
            execSync('cp -r /git/source/* /app/', { stdio: 'inherit' });
            
            // Install dependencies and build
            console.log('üì¶ Installing dependencies...');
            execSync('npm ci --cache /app/.npm', { stdio: 'inherit', cwd: '/app' });
            
            console.log('üî® Building project...');
            execSync('npm run build', { stdio: 'inherit', cwd: '/app' });
            
            // Copy build output to web server
            execSync('rm -rf /app/dist/*', { stdio: 'inherit' });
            execSync('cp -r /app/dist/* /app/dist/', { stdio: 'inherit' });
            
            console.log('‚úÖ Build completed successfully!');
            return true;
          } catch (error) {
            console.error('‚ùå Build failed:', error.message);
            return false;
          }
        }
        
        app.post('/webhook', (req, res) => {
          console.log('üì• Received webhook, triggering build...');
          buildProject();
          res.json({ status: 'ok', message: 'Build triggered' });
        });
        
        app.get('/health', (req, res) => {
          res.json({ status: 'healthy', timestamp: new Date().toISOString() });
        });
        
        // Initial build on startup
        setTimeout(() => {
          console.log('üöÄ Starting initial build...');
          buildProject();
        }, 10000);
        
        app.listen(PORT, '0.0.0.0', () => {
          console.log('üåê Webhook server listening on port ' + PORT);
        });
        EOF
        
        # Start webhook server
        node webhook-server.js
      "
    networks:
      - certifyd-network
    labels:
      - "com.docker.compose.service=builder"

  # File Browser
  certifyd-filebrowser:
    image: filebrowser/filebrowser:v2.27.0
    container_name: certifyd-filebrowser
    restart: unless-stopped
    ports:
      - "9002:80"
    volumes:
      - git-data:/srv/git:ro
      - web-data:/srv/web:ro
      - filebrowser-data:/database
      - filebrowser-config:/config
    environment:
      - FB_DATABASE=/database/filebrowser.db
      - FB_CONFIG=/config/.filebrowser.json
    networks:
      - certifyd-network
    labels:
      - "com.docker.compose.service=filebrowser"

  # Cloudflare Tunnel
  certifyd-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: certifyd-tunnel
    restart: unless-stopped
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${CF_TUNNEL_TOKEN}
    networks:
      - certifyd-network
    labels:
      - "com.docker.compose.service=tunnel"

volumes:
  git-data:
    driver: local
  web-data:
    driver: local
  builder-cache:
    driver: local
  filebrowser-data:
    driver: local
  filebrowser-config:
    driver: local

networks:
  certifyd-network:
    driver: bridge
