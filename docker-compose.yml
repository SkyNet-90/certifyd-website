version: '3.8'

services:
  certifyd-web:
    image: nginx:alpine
    container_name: certifyd-web
    restart: unless-stopped
    ports:
      - "9001:80"
    volumes:
      - certifyd_html:/usr/share/nginx/html:ro
      - certifyd_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - TZ=America/New_York
    depends_on:
      - git-sync
    networks:
      - certifyd-net

  # File manager for monitoring deployment
  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: certifyd-filebrowser
    restart: unless-stopped
    ports:
      - "9002:80"
    volumes:
      - certifyd_html:/srv:ro
      - git_repo:/git:ro
      - filebrowser_db:/database
    environment:
      - FB_BASEURL=/
      - FB_NOAUTH=false
    networks:
      - certifyd-net

  # Git sync with Node.js build capability (EXACTLY like your resume)
  git-sync:
    image: node:18-alpine
    container_name: certifyd-git-sync
    restart: unless-stopped
    volumes:
      - certifyd_html:/webroot
      - git_repo:/repo
      - node_modules_cache:/repo/node_modules
    environment:
      - GIT_REPO=https://github.com/SkyNet-90/certifyd-website.git
      - GIT_BRANCH=main
      - SYNC_INTERVAL=300
      - NODE_ENV=production
    command: >
      sh -c '
        echo "üöÄ Starting Certifyd git-sync with build capability...";
        apk add --no-cache git curl;
        
        cd /repo;
        
        if [ ! -d ".git" ]; then
          echo "üßπ Cleaning up existing non-git content...";
          rm -rf /repo/*;
          rm -rf /repo/.*; 
        fi;
        
        if [ -d ".git" ]; then
          echo "üì¶ Git repository exists, resetting and pulling...";
          git reset --hard HEAD || echo "Reset failed";
          git clean -fd || echo "Clean failed";
          git pull origin main || echo "Pull failed, will retry";
        else
          echo "üì• Cloning repository...";
          git clone https://github.com/SkyNet-90/certifyd-website.git /tmp/repo-clone || exit 1;
          cp -r /tmp/repo-clone/* /repo/;
          cp -r /tmp/repo-clone/.git /repo/;
          rm -rf /tmp/repo-clone;
          cd /repo;
          git checkout main || echo "Branch checkout failed";
        fi;
        
        if [ ! -f "package.json" ]; then
          echo "‚ùå Error: package.json not found in repository";
          exit 1;
        fi;
        
        echo "üî® Installing dependencies and building...";
        npm ci --production=false || exit 1;
        npm run build || exit 1;
        
        echo "üìã Copying built files to web directory...";
        rm -rf /webroot/*;
        cp -r dist/* /webroot/ || exit 1;
        
        echo "‚úÖ Initial deployment completed. Starting periodic sync...";
        
        while true; do
          sleep 300;
          echo "üîÑ Checking for updates at $(date)";
          
          cd /repo;
          BEFORE=$(git rev-parse HEAD 2>/dev/null || echo "unknown");
          
          git reset --hard HEAD || echo "Reset failed";
          git clean -fd || echo "Clean failed";
          git pull origin main || (echo "Git pull failed, retrying in next cycle" && continue);
          
          AFTER=$(git rev-parse HEAD 2>/dev/null || echo "unknown");
          
          if [ "$BEFORE" != "$AFTER" ]; then
            echo "üì¶ Changes detected! New commit: $AFTER";
            echo "üî® Rebuilding project...";
            
            npm ci --production=false || (echo "npm ci failed" && continue);
            npm run build || (echo "Build failed" && continue);
            
            echo "üöÄ Deploying new build...";
            rm -rf /webroot/*;
            cp -r dist/* /webroot/ || (echo "Copy failed" && continue);
            
            echo "‚úÖ Deployment completed successfully!";
          else
            echo "‚ÑπÔ∏è  No changes detected (commit: $AFTER)";
          fi;
        done
      '
    networks:
      - certifyd-net
    healthcheck:
      test: ["CMD", "test", "-f", "/webroot/index.html"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Cloudflare Tunnel
  cloudflared-certifyd:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-certifyd
    restart: unless-stopped
    command: >
      sh -c '
        if [ -z "$${CF_TUNNEL_TOKEN}" ] || [ "$${CF_TUNNEL_TOKEN}" = "" ]; then
          echo "‚ö†Ô∏è  CF_TUNNEL_TOKEN not configured - Starting Quick Tunnel for testing";
          echo "üåê Quick Tunnel connecting to certifyd-web:80...";
          echo "üí° For production: Set CF_TUNNEL_TOKEN environment variable with your Named Tunnel token";
          cloudflared tunnel --no-autoupdate --url http://certifyd-web:80;
        else
          echo "üåê Starting Named Cloudflare tunnel with token...";
          cloudflared tunnel --no-autoupdate run --token "$${CF_TUNNEL_TOKEN}";
        fi
      '
    environment:
      - CF_TUNNEL_TOKEN=${CF_TUNNEL_TOKEN:-}
    depends_on:
      - certifyd-web
    networks:
      - certifyd-net

volumes:
  certifyd_html:
    driver: local
  certifyd_logs:
    driver: local
  git_repo:
    driver: local
  node_modules_cache:
    driver: local
  filebrowser_db:
    driver: local

networks:
  certifyd-net:
    driver: bridge
